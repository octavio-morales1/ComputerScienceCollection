
(* Find exercise  *)

let n_left = { data <= 12; left <= 0; right <= 0}    (* 0 in head signals null *)
in let n_right = { data <= 44; left <= 0; right <= 0}
in let n_root = { data <= 33; left <= n_left ; right <= n_right }
in let t1 = { root <= n_root ; size <= 3}
in letrec find_bt_helper(t) = proc(num) {
  if number?(t)
  then zero?(1)
  else if num<<t.data
  then ((find_bt_helper t.left) num)
  else if t.data<<num
  then((find_bt_helper t.right) num)
  else number?(0)
}
in let find_bt = proc(t) {proc(v) {
  ((find_bt_helper t.root) v)
}} 
in ((find_bt t1) 12)
